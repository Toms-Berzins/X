name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_ENV: production
  PORT: 3001

jobs:
  test:
    runs-on: ubuntu-latest
    environment: test

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
      
    - name: Create env file
      run: |
        echo "NODE_ENV=${{ env.NODE_ENV }}" >> .env
        echo "PORT=${{ env.PORT }}" >> .env
        echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
        echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
        echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> .env
        echo "SMTP_PASS=${{ secrets.SMTP_PASS }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
    
    - name: Run linting
      run: npm run lint
    
    - name: Run unit tests
      run: npm run test:ci
      env:
        CI: true
    
    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CYPRESS_BASE_URL: http://localhost:3000
    
    - name: Upload test coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage
        path: coverage/

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Create production env file
      run: |
        echo "NODE_ENV=production" >> .env
        echo "PORT=${{ env.PORT }}" >> .env
        echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
        echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
        echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> .env
        echo "SMTP_PASS=${{ secrets.SMTP_PASS }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> .env
        echo "GA_TRACKING_ID=${{ secrets.GA_TRACKING_ID }}" >> .env
    
    - name: Build application
      run: npm run build:prod
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: build/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build
        path: build
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v20
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./build 